import { DB_CONFIG, USE_MOCK_DATA } from '@/config/database'
import { User, Faction, FactionMember, Warning, ActivityStatus, UserRole, UserPermission } from '@/components/types'

export interface ActivityLog {
  id?: number
  userId: number
  action: string
  details: string
  ipAddress?: string
  userAgent?: string
  timestamp: Date
}

export interface AdminAction {
  id: string
  adminId: number
  action: string
  target: string
  details?: string
  timestamp: Date
}

// –ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è DatabaseService - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç mock –¥–∞–Ω–Ω—ã–µ
class BrowserDatabaseService {
  private isInitialized = false

  async init(): Promise<void> {
    if (this.isInitialized) return
    console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è mock-–¥–∞–Ω–Ω—ã–µ')
    this.isInitialized = true
  }

  async close(): Promise<void> {
    console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è')
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç mock —Ä–µ–∂–∏–º)
  async testConnection(): Promise<{ success: boolean; message: string; usingMock: boolean }> {
    return {
      success: true,
      message: '–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è mock-–¥–∞–Ω–Ω—ã–µ',
      usingMock: true
    }
  }

  // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  async getUsers(): Promise<User[]> {
    console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
    return []
  }

  async createUser(userData: Omit<User, 'id' | 'created_at' | 'updated_at'>): Promise<User> {
    console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ mock —Ä–µ–∂–∏–º–µ')
    const mockUser: User = {
      id: Date.now(),
      ...userData,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }
    return mockUser
  }

  async updateUser(id: number, updates: Partial<User>): Promise<boolean> {
    console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ mock —Ä–µ–∂–∏–º–µ')
    return true
  }

  async deleteUser(id: number): Promise<boolean> {
    console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ mock —Ä–µ–∂–∏–º–µ')
    return true
  }

  async getUserByUsername(username: string): Promise<User | null> {
    console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ mock —Ä–µ–∂–∏–º–µ')
    return null
  }

  async getFactions(): Promise<Faction[]> {
    console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è mock —Ñ—Ä–∞–∫—Ü–∏–∏')
    return []
  }

  async createFaction(factionData: Omit<Faction, 'id' | 'members' | 'totalMembers' | 'onlineMembers'>): Promise<Faction> {
    console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –≤ mock —Ä–µ–∂–∏–º–µ')
    const mockFaction: Faction = {
      id: Date.now(),
      ...factionData,
      members: [],
      totalMembers: 0,
      onlineMembers: 0
    }
    return mockFaction
  }

  async addMember(memberData: Omit<FactionMember, 'id' | 'joinDate'>): Promise<FactionMember> {
    console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ mock —Ä–µ–∂–∏–º–µ')
    const mockMember: FactionMember = {
      id: Date.now(),
      ...memberData,
      joinDate: new Date(),
      warnings: []
    }
    return mockMember
  }

  async updateMemberStatus(memberId: number, status: ActivityStatus): Promise<boolean> {
    console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ mock —Ä–µ–∂–∏–º–µ')
    return true
  }

  async addWarning(memberId: number, warningData: Omit<Warning, 'id' | 'timestamp'>): Promise<Warning> {
    console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ mock —Ä–µ–∂–∏–º–µ')
    const mockWarning: Warning = {
      id: Date.now().toString(),
      ...warningData,
      timestamp: new Date()
    }
    return mockWarning
  }

  async removeWarning(memberId: number, warningId: string): Promise<boolean> {
    console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ mock —Ä–µ–∂–∏–º–µ')
    return true
  }

  async logActivity(activityData: Omit<ActivityLog, 'id' | 'timestamp'>): Promise<ActivityLog> {
    console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ mock —Ä–µ–∂–∏–º–µ')
    const mockActivity: ActivityLog = {
      id: Date.now(),
      ...activityData,
      timestamp: new Date()
    }
    return mockActivity
  }

  async getActivityLogs(limit: number = 100): Promise<ActivityLog[]> {
    console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ mock —Ä–µ–∂–∏–º–µ')
    return []
  }

  async logAdminAction(actionData: Omit<AdminAction, 'id' | 'timestamp'>): Promise<AdminAction> {
    console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏—è –≤ mock —Ä–µ–∂–∏–º–µ')
    const mockAction: AdminAction = {
      id: Date.now().toString(),
      ...actionData,
      timestamp: new Date()
    }
    return mockAction
  }

  async getAdminActions(limit: number = 100): Promise<AdminAction[]> {
    console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–π –≤ mock —Ä–µ–∂–∏–º–µ')
    return []
  }

  // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º—ã
  async ensureSchemaExists(): Promise<void> {
    console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –ø—Ä–æ–ø—É—â–µ–Ω–∞')
  }

  async validateSchema(): Promise<{ valid: boolean; missingTables: string[] }> {
    console.log('üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã –ø—Ä–æ–ø—É—â–µ–Ω–∞')
    return { valid: true, missingTables: [] }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
  isUsingMockData(): boolean {
    return true
  }

  isConnected(): boolean {
    return false // –í –±—Ä–∞—É–∑–µ—Ä–µ MySQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const browserDatabaseService = new BrowserDatabaseService()

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
export { BrowserDatabaseService }
export default browserDatabaseService