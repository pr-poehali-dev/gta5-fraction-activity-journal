import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';
import { Button } from '../ui/button';
import { Badge } from '../ui/badge';
import { Alert, AlertDescription } from '../ui/alert';
import { Progress } from '../ui/progress';
import Icon from '../ui/icon';
import { DatabaseConversionService, DatabaseCharsetInfo, ConversionResult } from '../../services/DatabaseConversionService';

export const DatabaseConversionPanel: React.FC = () => {
  const [conversionService] = useState(() => new DatabaseConversionService());
  const [isLoading, setIsLoading] = useState(false);
  const [charsetInfo, setCharsetInfo] = useState<DatabaseCharsetInfo | null>(null);
  const [conversionResult, setConversionResult] = useState<ConversionResult | null>(null);
  const [showAdvanced, setShowAdvanced] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–¥–∏—Ä–æ–≤–∫–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadCharsetInfo();
  }, []);

  const loadCharsetInfo = async () => {
    try {
      setIsLoading(true);
      const info = await conversionService.checkDatabaseCharset();
      setCharsetInfo(info);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–¥–∏—Ä–æ–≤–∫–µ:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleConvertDatabase = async () => {
    try {
      setIsLoading(true);
      setConversionResult(null);

      const result = await conversionService.convertToUtf8mb4();
      setConversionResult(result);

      if (result.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        await loadCharsetInfo();
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', error);
      setConversionResult({
        success: false,
        tablesConverted: [],
        errors: [`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${(error as Error).message}`],
        warnings: [],
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleDownloadScript = async () => {
    try {
      setIsLoading(true);
      const script = await conversionService.generateConversionScript();
      
      const blob = new Blob([script], { type: 'text/sql' });
      const url = URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = url;
      link.download = `utf8mb4_conversion_${new Date().toISOString().split('T')[0]}.sql`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      URL.revokeObjectURL(url);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç: ' + (error as Error).message);
    } finally {
      setIsLoading(false);
    }
  };

  const handleCreateBackup = async () => {
    try {
      setIsLoading(true);
      const backup = await conversionService.createBackupBeforeConversion();
      
      const blob = new Blob([backup], { type: 'text/sql' });
      const url = URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = url;
      link.download = `backup_before_conversion_${new Date().toISOString().split('T')[0]}.sql`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      URL.revokeObjectURL(url);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: ' + (error as Error).message);
    } finally {
      setIsLoading(false);
    }
  };

  const getCharsetBadgeVariant = (charset: string, collation: string) => {
    if (charset === 'utf8mb4' && collation === 'utf8mb4_unicode_ci') {
      return 'default'; // –ó–µ–ª–µ–Ω—ã–π
    } else if (charset === 'utf8mb4') {
      return 'secondary'; // –ñ–µ–ª—Ç—ã–π  
    } else {
      return 'destructive'; // –ö—Ä–∞—Å–Ω—ã–π
    }
  };

  const needsConversion = charsetInfo && (
    charsetInfo.database.charset !== 'utf8mb4' || 
    charsetInfo.database.collation !== 'utf8mb4_unicode_ci' ||
    charsetInfo.tables.some(table => 
      table.charset !== 'utf8mb4' || table.collation !== 'utf8mb4_unicode_ci'
    )
  );

  return (
    <div className="space-y-6">
      {/* –°—Ç–∞—Ç—É—Å –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Icon name="Database" size={20} />
            –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          </CardTitle>
          <CardDescription>
            –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ UTF-8 (utf8mb4_unicode_ci)
          </CardDescription>
        </CardHeader>
        <CardContent>
          {isLoading && !charsetInfo ? (
            <div className="flex items-center gap-2">
              <Icon name="Loader2" size={16} className="animate-spin" />
              <span>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏...</span>
            </div>
          ) : charsetInfo ? (
            <div className="space-y-4">
              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö */}
              <div className="space-y-2">
                <h4 className="font-medium text-sm">üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {charsetInfo.database.name}</h4>
                <div className="flex flex-wrap gap-2">
                  <Badge variant={getCharsetBadgeVariant(charsetInfo.database.charset, charsetInfo.database.collation)}>
                    {charsetInfo.database.charset} ‚Ä¢ {charsetInfo.database.collation}
                  </Badge>
                </div>
              </div>

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–∞—Ö */}
              <div className="space-y-2">
                <h4 className="font-medium text-sm">üìã –¢–∞–±–ª–∏—Ü—ã ({charsetInfo.tables.length})</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                  {charsetInfo.tables.map((table) => (
                    <div key={table.name} className="flex items-center justify-between p-2 border rounded">
                      <span className="text-sm font-mono">{table.name}</span>
                      <Badge 
                        variant={getCharsetBadgeVariant(table.charset, table.collation)}
                        className="text-xs"
                      >
                        {table.charset}
                      </Badge>
                    </div>
                  ))}
                </div>
              </div>

              {/* –°—Ç–∞—Ç—É—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ */}
              <div className="pt-4 border-t">
                {needsConversion ? (
                  <Alert>
                    <Icon name="AlertTriangle" size={16} />
                    <AlertDescription>
                      –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ utf8mb4_unicode_ci –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ UTF-8 —Å–∏–º–≤–æ–ª–æ–≤ (—ç–º–æ–¥–∑–∏, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã).
                    </AlertDescription>
                  </Alert>
                ) : (
                  <Alert>
                    <Icon name="CheckCircle" size={16} />
                    <AlertDescription>
                      –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç utf8mb4_unicode_ci. –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ UTF-8 —Å–∏–º–≤–æ–ª–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞.
                    </AlertDescription>
                  </Alert>
                )}
              </div>
            </div>
          ) : (
            <Alert variant="destructive">
              <Icon name="AlertCircle" size={16} />
              <AlertDescription>
                –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–∏—Ä–æ–≤–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
              </AlertDescription>
            </Alert>
          )}

          <div className="flex flex-wrap gap-2 mt-4">
            <Button
              onClick={loadCharsetInfo}
              variant="outline"
              size="sm"
              disabled={isLoading}
            >
              <Icon name="RefreshCw" size={16} className="mr-2" />
              –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
            
            <Button
              onClick={() => setShowAdvanced(!showAdvanced)}
              variant="ghost"
              size="sm"
            >
              <Icon name={showAdvanced ? "ChevronUp" : "ChevronDown"} size={16} className="mr-2" />
              {showAdvanced ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'}
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {showAdvanced && charsetInfo && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Icon name="Info" size={20} />
              –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {/* –ö–æ–ª–æ–Ω–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Ç–∏–ø–∞–º–∏ */}
              <div className="space-y-2">
                <h4 className="font-medium text-sm">üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ ({charsetInfo.columns.length})</h4>
                <div className="max-h-40 overflow-y-auto">
                  <div className="space-y-1">
                    {charsetInfo.columns.map((column, index) => (
                      <div key={index} className="flex items-center justify-between text-xs p-2 bg-muted rounded">
                        <span className="font-mono">
                          {column.table}.{column.column} ({column.type})
                        </span>
                        <Badge 
                          variant={column.charset === 'utf8mb4' ? 'default' : 'secondary'}
                          className="text-xs"
                        >
                          {column.charset || '–Ω–µ –∑–∞–¥–∞–Ω–æ'}
                        </Badge>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è */}
      {needsConversion && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Icon name="ArrowRightLeft" size={20} />
              –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ UTF-8
            </CardTitle>
            <CardDescription>
              –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ utf8mb4_unicode_ci
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <Alert>
              <Icon name="AlertTriangle" size={16} />
              <AlertDescription>
                <strong>–í–∞–∂–Ω–æ:</strong> –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π. 
                –ü—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.
              </AlertDescription>
            </Alert>

            <div className="flex flex-wrap gap-3">
              <Button
                onClick={handleCreateBackup}
                variant="outline"
                disabled={isLoading}
              >
                <Icon name="Download" size={16} className="mr-2" />
                {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø'}
              </Button>

              <Button
                onClick={handleDownloadScript}
                variant="outline"
                disabled={isLoading}
              >
                <Icon name="FileText" size={16} className="mr-2" />
                {isLoading ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–∫–∞—á–∞—Ç—å SQL-—Å–∫—Ä–∏–ø—Ç'}
              </Button>

              <Button
                onClick={handleConvertDatabase}
                disabled={isLoading}
                className="bg-blue-600 hover:bg-blue-700"
              >
                <Icon name="Zap" size={16} className="mr-2" />
                {isLoading ? '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è...' : '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'}
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ */}
      {conversionResult && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              {conversionResult.success ? (
                <Icon name="CheckCircle" size={20} className="text-green-500" />
              ) : (
                <Icon name="XCircle" size={20} className="text-red-500" />
              )}
              –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
            {conversionResult.tablesConverted.length > 0 && (
              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span>–°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç–∞–±–ª–∏—Ü:</span>
                  <span>{conversionResult.tablesConverted.length}</span>
                </div>
                <Progress value={100} className="w-full" />
              </div>
            )}

            {/* –£—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã */}
            {conversionResult.tablesConverted.length > 0 && (
              <div className="space-y-2">
                <h4 className="font-medium text-sm text-green-600">‚úÖ –°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:</h4>
                <div className="flex flex-wrap gap-1">
                  {conversionResult.tablesConverted.map((table) => (
                    <Badge key={table} variant="default" className="text-xs">
                      {table}
                    </Badge>
                  ))}
                </div>
              </div>
            )}

            {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
            {conversionResult.warnings.length > 0 && (
              <div className="space-y-2">
                <h4 className="font-medium text-sm text-yellow-600">‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</h4>
                <div className="space-y-1">
                  {conversionResult.warnings.map((warning, index) => (
                    <div key={index} className="text-sm text-yellow-700 bg-yellow-50 p-2 rounded">
                      {warning}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* –û—à–∏–±–∫–∏ */}
            {conversionResult.errors.length > 0 && (
              <div className="space-y-2">
                <h4 className="font-medium text-sm text-red-600">‚ùå –û—à–∏–±–∫–∏:</h4>
                <div className="space-y-1">
                  {conversionResult.errors.map((error, index) => (
                    <div key={index} className="text-sm text-red-700 bg-red-50 p-2 rounded">
                      {error}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ */}
            <div className="pt-4 border-t">
              <Button
                onClick={loadCharsetInfo}
                variant="outline"
                size="sm"
              >
                <Icon name="RefreshCw" size={16} className="mr-2" />
                –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ UTF-8 */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Icon name="HelpCircle" size={20} />
            –û –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3 text-sm text-muted-foreground">
            <div className="flex items-start gap-2">
              <Icon name="Globe" size={16} className="mt-0.5 text-blue-500" />
              <div>
                <strong>utf8mb4_unicode_ci</strong> - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ UTF-8, –≤–∫–ª—é—á–∞—è —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
              </div>
            </div>
            <div className="flex items-start gap-2">
              <Icon name="Zap" size={16} className="mt-0.5 text-green-500" />
              <div>
                <strong>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è</strong> - –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
              </div>
            </div>
            <div className="flex items-start gap-2">
              <Icon name="FileText" size={16} className="mt-0.5 text-orange-500" />
              <div>
                <strong>SQL-—Å–∫—Ä–∏–ø—Ç</strong> - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ phpMyAdmin –∏–ª–∏ –∫–æ–Ω—Å–æ–ª—å MySQL
              </div>
            </div>
            <div className="flex items-start gap-2">
              <Icon name="Shield" size={16} className="mt-0.5 text-purple-500" />
              <div>
                <strong>–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è</strong> - –≤—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};