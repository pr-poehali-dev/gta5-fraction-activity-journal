import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import { Label } from '../ui/label';
import { Checkbox } from '../ui/checkbox';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';
import { Badge } from '../ui/badge';
import Icon from '../ui/icon';
import { DataExportService, ExportOptions } from '../../services/DataExportService';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';

interface DataStats {
  users: { total: number; active: number; roles: Record<string, number> };
  activities: { total: number; recent: number; actions: Record<string, number> };
}

export const DataExportPanel: React.FC = () => {
  const [exportService] = useState(() => new DataExportService());
  const [isLoading, setIsLoading] = useState(false);
  const [dataStats, setDataStats] = useState<DataStats | null>(null);
  const [exportOptions, setExportOptions] = useState<ExportOptions>({
    includeUsers: true,
    includeActivities: true,
    includeMetadata: true,
    format: 'json',
  });

  const [dateRange, setDateRange] = useState({
    from: '',
    to: '',
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  const loadDataStats = async () => {
    try {
      setIsLoading(true);
      const stats = await exportService.getDataStats();
      setDataStats(stats);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  React.useEffect(() => {
    loadDataStats();
  }, []);

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
  const handleExport = async () => {
    try {
      setIsLoading(true);
      
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–ø—Ü–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∞
      const options: ExportOptions = {
        ...exportOptions,
        dateRange: dateRange.from && dateRange.to ? {
          from: new Date(dateRange.from),
          to: new Date(dateRange.to),
        } : undefined,
      };

      // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
      const exportedData = await exportService.exportData(options);
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
      const contentTypes = {
        json: 'application/json',
        sql: 'application/sql',
        csv: 'text/csv',
      };

      const filename = exportService.generateFilename(options.format, 'faction_system_export');
      
      // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      exportService.downloadAsFile(
        exportedData,
        filename,
        contentTypes[options.format]
      );

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: ' + (error as Error).message);
    } finally {
      setIsLoading(false);
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–Ω–∏–º–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const handleCreateSnapshot = async () => {
    try {
      setIsLoading(true);
      const snapshot = await exportService.createFullSnapshot();
      const filename = exportService.generateFilename('json', 'faction_system_snapshot');
      
      exportService.downloadAsFile(
        JSON.stringify(snapshot, null, 2),
        filename,
        'application/json'
      );

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–Ω–∏–º–æ–∫ –¥–∞–Ω–Ω—ã—Ö: ' + (error as Error).message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Icon name="BarChart3" size={20} />
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
          </CardTitle>
          <CardDescription>
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
            <div className="space-y-3">
              <h4 className="font-medium text-sm">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h4>
              {dataStats ? (
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">–í—Å–µ–≥–æ:</span>
                    <Badge variant="secondary">{dataStats.users.total}</Badge>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">–ê–∫—Ç–∏–≤–Ω—ã—Ö:</span>
                    <Badge variant="default">{dataStats.users.active}</Badge>
                  </div>
                  <div className="space-y-1">
                    <span className="text-sm text-muted-foreground">–†–æ–ª–∏:</span>
                    <div className="flex flex-wrap gap-1">
                      {Object.entries(dataStats.users.roles).map(([role, count]) => (
                        <Badge key={role} variant="outline" className="text-xs">
                          {role}: {count}
                        </Badge>
                      ))}
                    </div>
                  </div>
                </div>
              ) : (
                <div className="text-sm text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
              )}
            </div>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
            <div className="space-y-3">
              <h4 className="font-medium text-sm">üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h4>
              {dataStats ? (
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:</span>
                    <Badge variant="secondary">{dataStats.activities.total}</Badge>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">–ó–∞ –Ω–µ–¥–µ–ª—é:</span>
                    <Badge variant="default">{dataStats.activities.recent}</Badge>
                  </div>
                  <div className="space-y-1">
                    <span className="text-sm text-muted-foreground">–î–µ–π—Å—Ç–≤–∏—è:</span>
                    <div className="flex flex-wrap gap-1">
                      {Object.entries(dataStats.activities.actions).slice(0, 3).map(([action, count]) => (
                        <Badge key={action} variant="outline" className="text-xs">
                          {action}: {count}
                        </Badge>
                      ))}
                    </div>
                  </div>
                </div>
              ) : (
                <div className="text-sm text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
              )}
            </div>
          </div>

          <div className="mt-4 pt-4 border-t">
            <Button
              onClick={loadDataStats}
              variant="outline"
              size="sm"
              disabled={isLoading}
            >
              <Icon name="RefreshCw" size={16} className="mr-2" />
              –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Icon name="Download" size={20} />
            –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
          </CardTitle>
          <CardDescription>
            –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ —Å–∫–∞—á–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* –ß—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å */}
          <div className="space-y-3">
            <Label className="text-sm font-medium">–î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:</Label>
            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="include-users"
                  checked={exportOptions.includeUsers}
                  onCheckedChange={(checked) =>
                    setExportOptions(prev => ({ ...prev, includeUsers: !!checked }))
                  }
                />
                <Label htmlFor="include-users" className="text-sm">
                  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({dataStats?.users.total || 0})
                </Label>
              </div>
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="include-activities"
                  checked={exportOptions.includeActivities}
                  onCheckedChange={(checked) =>
                    setExportOptions(prev => ({ ...prev, includeActivities: !!checked }))
                  }
                />
                <Label htmlFor="include-activities" className="text-sm">
                  –ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ({dataStats?.activities.total || 0})
                </Label>
              </div>
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="include-metadata"
                  checked={exportOptions.includeMetadata}
                  onCheckedChange={(checked) =>
                    setExportOptions(prev => ({ ...prev, includeMetadata: !!checked }))
                  }
                />
                <Label htmlFor="include-metadata" className="text-sm">
                  –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                </Label>
              </div>
            </div>
          </div>

          {/* –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
          <div className="space-y-2">
            <Label className="text-sm font-medium">–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:</Label>
            <Select
              value={exportOptions.format}
              onValueChange={(value: 'json' | 'sql' | 'csv') =>
                setExportOptions(prev => ({ ...prev, format: value }))
              }
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="json">
                  <div className="flex items-center gap-2">
                    <Icon name="FileText" size={16} />
                    JSON - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                  </div>
                </SelectItem>
                <SelectItem value="sql">
                  <div className="flex items-center gap-2">
                    <Icon name="Database" size={16} />
                    SQL - –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                  </div>
                </SelectItem>
                <SelectItem value="csv">
                  <div className="flex items-center gap-2">
                    <Icon name="Table" size={16} />
                    CSV - —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è Excel
                  </div>
                </SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
          {exportOptions.includeActivities && (
            <div className="space-y-3">
              <Label className="text-sm font-medium">–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</Label>
              <div className="grid grid-cols-2 gap-2">
                <div>
                  <Label htmlFor="date-from" className="text-xs text-muted-foreground">–° –¥–∞—Ç—ã:</Label>
                  <Input
                    id="date-from"
                    type="date"
                    value={dateRange.from}
                    onChange={(e) => setDateRange(prev => ({ ...prev, from: e.target.value }))}
                  />
                </div>
                <div>
                  <Label htmlFor="date-to" className="text-xs text-muted-foreground">–î–æ –¥–∞—Ç—ã:</Label>
                  <Input
                    id="date-to"
                    type="date"
                    value={dateRange.to}
                    onChange={(e) => setDateRange(prev => ({ ...prev, to: e.target.value }))}
                  />
                </div>
              </div>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex flex-col sm:flex-row gap-3 pt-4 border-t">
            <Button
              onClick={handleExport}
              disabled={isLoading || (!exportOptions.includeUsers && !exportOptions.includeActivities)}
              className="flex-1"
            >
              <Icon name="Download" size={16} className="mr-2" />
              {isLoading ? '–≠–∫—Å–ø–æ—Ä—Ç...' : `–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ ${exportOptions.format.toUpperCase()}`}
            </Button>

            <Button
              onClick={handleCreateSnapshot}
              variant="outline"
              disabled={isLoading}
              className="flex-1"
            >
              <Icon name="Camera" size={16} className="mr-2" />
              {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–ü–æ–ª–Ω—ã–π —Å–Ω–∏–º–æ–∫ —Å–∏—Å—Ç–µ–º—ã'}
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Icon name="Info" size={20} />
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3 text-sm text-muted-foreground">
            <div className="flex items-start gap-2">
              <Icon name="FileText" size={16} className="mt-0.5 text-blue-500" />
              <div>
                <strong>JSON</strong> - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
              </div>
            </div>
            <div className="flex items-start gap-2">
              <Icon name="Database" size={16} className="mt-0.5 text-green-500" />
              <div>
                <strong>SQL</strong> - –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ MySQL
              </div>
            </div>
            <div className="flex items-start gap-2">
              <Icon name="Table" size={16} className="mt-0.5 text-orange-500" />
              <div>
                <strong>CSV</strong> - —Ç–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ Excel –∏–ª–∏ Google Sheets
              </div>
            </div>
            <div className="flex items-start gap-2">
              <Icon name="Camera" size={16} className="mt-0.5 text-purple-500" />
              <div>
                <strong>–ü–æ–ª–Ω—ã–π —Å–Ω–∏–º–æ–∫</strong> - –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};